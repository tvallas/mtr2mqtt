name: Semantic Release
on:
  push:
    branches:
      - chore/add-docker-support

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v1
      with:
        python-version: 3.8
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pipenv 
        make install
    - name: Analysing the code with pylint
      run: pipenv run find {mtr2mqtt,} -name \*.py -type f -exec pylint {} \+
    - name: Run unit tests
      run: pipenv run make test
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Get pre release version
      #run: echo "pre_release_version=$(pipenv run semantic-release print-version --current)" >> $GITHUB_ENV
      run: echo "pre_release_version=0.1.1" >> $GITHUB_ENV
    - name: Python Semantic Release
      uses: relekang/python-semantic-release@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        pypi_token: ${{ secrets.PYPI_TOKEN }}
    - name: Get post release version
      run: echo "post_release_version=$(pipenv run semantic-release print-version --current)" >> $GITHUB_ENV
    - name: Check if new release was created
      if: env.pre_release_version != env.post_release_version
      shell: bash
      run: |
        echo $post_release_version > new_version_released
        pwd
        ls -R
    - name: Upload new release version file
      if: env.pre_release_version != env.post_release_version
      uses: actions/upload-artifact@v2
      with:
        path: new_version_released
        retention-days: 5
    - name: Test envs
      run: env
  docker-build:
    runs-on: ubuntu-latest
    needs: release
    steps:
    - uses: actions/checkout@v2
    - uses: actions/download-artifact@v2
    - name: Display structure of downloaded files
      run: ls -R
    - name: Print new version if released
      if: hashFiles('new_version_released') != ''
      shell: bash
      run: |
        version=`cat new_version_released`
        echo "new release version: $version"
    