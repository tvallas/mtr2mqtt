name: Semantic Release
on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  debug:
    name: Debug
    runs-on: ubuntu-latest
    steps:
    - name: Dump env
      run: env | sort
    - name: Dump GitHub context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: echo "$GITHUB_CONTEXT"
  release:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Set up Python 3.8
      uses: actions/setup-python@v1
      with:
        python-version: 3.8
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pipenv 
        make install
    - name: Analysing the code with pylint
      run: pipenv run find {mtr2mqtt,} -name \*.py -type f -exec pylint {} \+
    - name: Run unit tests
      run: pipenv run make test
    - name: Get pre release version
      run: |
        echo "pre_release_version=$(pipenv run semantic-release print-version --current)" >> $GITHUB_ENV
        echo ${{ env.pre_release_version }}
    - name: Python Semantic Release
      id: release
      uses: python-semantic-release/python-semantic-release@v7.34.6
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        repository_username: __token__
        repository_password: ${{ secrets.PYPI_TOKEN }}
    - name: Get post release version
      run: echo "post_release_version=$(pipenv run semantic-release print-version --current)" >> $GITHUB_ENV
    - name: Check if new release was created
      if: env.pre_release_version != env.post_release_version
      shell: bash
      run: |
        echo $post_release_version > new_version_released
        cat new_version_released
        echo "new_release=true" >> $GITHUB_ENV
    - name: Docker meta
      id: meta
      uses: crazy-max/ghaction-docker-meta@v2
      with:
        images: tvallas/mtr2mqtt
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Verify that package is available and wait if necessary
      shell: bash
      run: |
        for EXPONENTIAL_BACKOFF in {1..8}; do
          pip3 download --no-deps --quiet mtr2mqtt==${{ env.post_release_version }} && break;
          DELAY=$((2**$EXPONENTIAL_BACKOFF))
          echo "package not yet available, sleeping for $DELAY seconds"
          sleep $DELAY
        done
    - name: Build and push
      uses: docker/build-push-action@v2
      with:
        context: .
        platforms: linux/amd64,linux/arm64,linux/arm/v7,linux/arm/v6
        push: true
        tags: "${{ secrets.DOCKERHUB_USERNAME }}/mtr2mqtt:${{ env.post_release_version }},${{ secrets.DOCKERHUB_USERNAME }}/mtr2mqtt:latest"
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          VERSION=${{ env.post_release_version }}
